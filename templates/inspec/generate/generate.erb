require 'yaml'
require 'logger'

<% resource_name = resource_name(object, product) -%>
title 'Test GCP <%= resource_name -%> resource.'
control '<%= resource_name -%>-1.0' do
  impact 1.0
  title '<%= resource_name -%> resource test'

  plural_identifiers = []

  logger = Logger.new(STDOUT)
  logger.level = Logger::WARN
  logger.warn('Generating tests for <%= resource_name -%>')
  filters = []
  ignored_fields = []
  output_folder = ENV['OUTPUT_PATH']

  if output_folder.nil?
    output_folder = File.join(File.dirname(__FILE__), '../../generated_tests')
    logger.warn("Undefined output folder path at variable OUTPUT_PATH. Defaulting to #{File.expand_path(output_folder)}")
  end

  Dir.mkdir(output_folder) unless File.exist?(output_folder)
  template_path = File.join(File.dirname(__FILE__), '../../generated_test_template.erb')
  config_folder = ENV['CNF_PATH']
  logger.warn('Undefined configuration folder path at variable CNF_PATH. Ignoring configuration files')
  unless config_folder.nil?
    file_name = File.join(config_folder, '<%= resource_name %>.yaml')
    if File.file?(file_name)
      config = YAML.load_file(file_name)
      config_filters = config['filters']
      config_filters.each do |filter_string|
        filter = eval "lambda { |resource| #{filter_string} }"
        filters.push(filter)
      end
      config_ignored = config['ignore_fields']
      ignored_fields += config_ignored
    end
  end
  project_name = ENV['GCP_PROJECT_NAME']
  raise 'Undefined project name, please set the GCP_PROJECT_NAME variable' if project_name.nil?
  plural_identifiers = [{ project: project_name }]
<% individual_url = format_url(object.self_link_url) -%>
<% params = individual_url.scan(/({{)(\w+)(}})/).map { |arr| arr[1] } -%>

<% if params.include?('zone') -%>
  next_identifiers = []
  zone_names = google_compute_zones(project: project_name).zone_names
  zone_names.each do |zone_name|
    plural_identifiers.each do |plural_identifier|
      next_identifiers.push(plural_identifier.merge({ zone: zone_name }))
    end
  end
  plural_identifiers = next_identifiers

<% end -%>
<% if params.include?('region') -%>
  next_identifiers = []
  region_names = google_compute_regions(project: project_name).region_names
  region_names.each do |region_name|
    plural_identifiers.each do |plural_identifier|
      next_identifiers.push(plural_identifier.merge({ region: region_name }))
    end
  end
  plural_identifiers = next_identifiers

<% end -%>
<% if params.include?('location') -%>
  next_identifiers = []
  region_names = google_compute_regions(project: project_name).region_names
  region_names.each do |region_name|
    plural_identifiers.each do |plural_identifier|
      next_identifiers.push(plural_identifier.merge({ location: region_name }))
    end
  end
  plural_identifiers = next_identifiers

<% end -%>
<% if params.include?('managed_zone') -%>
  next_identifiers = []
  managed_zones = google_dns_managed_zones(project: project_name).zone_names
  managed_zones.each do |managed_zone|
    plural_identifiers.each do |plural_identifier|
      next_identifiers.push(plural_identifier.merge({ managed_zone: managed_zone }))
    end
  end
  plural_identifiers = next_identifiers

<% end -%>
  all_identifiers = []
  i = 0
  plural_identifiers.each do |plural_identifier|
    plural = <%= resource_name.pluralize -%>(plural_identifier)
    identifiers = plural.identifiers

    identifiers.each do |identifier|
      all_identifiers.push(identifier)
      resource = <%= resource_name -%>(identifier)

      if filters.all? { |filter| filter.call(resource) }
        resource.dump(output_folder, template_path, i, ignored_fields)

        output = "Writing #{File.expand_path(output_folder)}/<%= object.name -%>_#{i}.rb"
        describe output do
          its('length') { should be >= 0 }
        end
        i += 1
      end
    end
  end
end