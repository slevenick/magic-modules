require 'yaml'

<% resource_name = resource_name(object, product_ns) -%>
title 'Test GCP <%= resource_name -%> resource.'


control '<%= resource_name -%>-1.0' do
  impact 1.0
  title '<%= resource_name -%> resource test'

  plural_identifiers = []

  filters = []
  ignored_fields = []
  output_folder = ENV["OUTPUT_PATH"]
  raise "Undefined output folder path at variable OUTPUT_PATH" if output_folder.nil?
  template_path = ENV["TEMPLATE_PATH"]
  raise "Undefined output folder path at variable TEMPLATE_PATH" if template_path.nil?
  config_folder = ENV["CNF_PATH"]
  raise "Undefined configuration folder path at variable CNF_PATH" if config_folder.nil?
  file_name = File.join(config_folder, "<%= resource_name %>.yaml")
  if File.file?(file_name)
    config = YAML::load_file(file_name)
    config_filters = config['filters']
    config_filters.each do |filter_string|
      filter = eval "lambda { |resource| #{filter_string} }"
      filters.push(filter)
    end
    config_ignored = config['ignore']
    ignored_fields += config_ignored
  end
  project_name = ENV["GCP_PROJECT_NAME"]
  raise "Undefined project name" if project_name.nil?
  plural_identifiers = [{project: project_name}]
<% 
individual_url = format_url(object.self_link_url[1])
params = individual_url.scan(/({{)(\w+)(}})/).map { |arr| arr[1] } 
%>
<% if params.include?('zone') %>
  next_identifiers = []
  zone_names = google_compute_zones(project: project_name).zone_names
  zone_names.each do |zone_name|
    plural_identifiers.each do |plural_identifier|
      next_identifiers.push(plural_identifier.merge({zone: zone_name}))
    end
  end
  plural_identifiers = next_identifiers
<% end %>
<% if params.include?('region') %>
  next_identifiers = []
  region_names = google_compute_regions(project: project_name).region_names
  region_names.each do |region_name|
    plural_identifiers.each do |plural_identifier|
      next_identifiers.push(plural_identifier.merge({region: region_name}))
    end
  end
  plural_identifiers = next_identifiers
<% end %>
<% if params.include?('location') %>
  next_identifiers = []
  region_names = google_compute_regions(project: project_name).region_names
  region_names.each do |region_name|
    plural_identifiers.each do |plural_identifier|
      next_identifiers.push(plural_identifier.merge({location: region_name}))
    end
  end
  plural_identifiers = next_identifiers
<% end %>
<% if params.include?('managed_zone') %>
  next_identifiers = []
  managed_zones = google_dns_managed_zones(project: project_name).zone_names
  managed_zones.each do |managed_zone|
    plural_identifiers.each do |plural_identifier|
      next_identifiers.push(plural_identifier.merge({managed_zone: managed_zone}))
    end
  end
  plural_identifiers = next_identifiers
<% end %>
  all_identifiers = []
  i = 0
  plural_identifiers.each do |plural_identifier|
    plural = <%= resource_name.pluralize -%>(plural_identifier)
    identifiers = plural.identifiers
    
    identifiers.each do |identifier|
      all_identifiers.push(identifier)
      resource = <%= resource_name -%>(identifier)

      if filters.all? { |filter| filter.call(resource) }
        resource.dump(output_folder, template_path, i, ignored_fields)
        
        output = "Writing #{output_folder}<%= object.name -%>_#{i}.rb"
        describe output do
          it { should match /test/ }
        end   
        i += 1
      end
    end
  end

  all_ids_name = '<%= resource_name -%>_identifiers.json'
  File.open("#{output_folder}/#{all_ids_name}", 'w') do |file|
    file.write(all_identifiers.to_json)
  end
end