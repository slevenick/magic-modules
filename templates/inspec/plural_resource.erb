<%# The license inside this block applies to this file.
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-%>
<%= compile 'templates/license.erb' -%>

<%= lines(autogen_notice :ruby) -%>

class <%= object.name -%>s < Inspec.resource(1)

<%
name = "google_#{product_ns.downcase}_#{object.name.underscore}"
-%>
  name '<%= plural(name) -%>'
  desc '<%= object.name -%> plural resource'
  supports platform: 'gcp2'

  filter_table_config = FilterTable.create
<% object.all_user_properties.each do |prop| -%>
<% 	 unless prop.input -%>
<% 
out = plural(prop.out_name)
-%>

  <%= "filter_table_config.add(:#{out}, field: :#{prop.out_name})" -%>
<% 	 end # unless prop.input -%>
<% end # object.all_user_properties.each do -%>


  filter_table_config.connect(self, :fetch_data)

<%
base = "'#{object.self_link_url[0].join}'"
url = object.base_url
if url.is_a?(Array)
  url = url.join('')
else
  url = url.split("\n").join('')
end
-%>
  def base
    <%= base %>
  end

  def url
    '<%= url %>'
  end

  def initialize(params = {}) 
    @params = params
  end

  def fetch_resource(params)
    get_request = inspec.backend.fetch(base, url, params)
  end

<% 
link_query = object.self_link_query || object.list_url_response
-%>
  def fetch_data
  	@data = fetch_wrapped_resource(<%= "'#{link_query.kind}'" -%>, <%= "'#{link_query.items}'" -%>)
  end

  def fetch_wrapped_resource(wrap_kind, wrap_path)
    result = fetch_resource(@params)
    return if result.nil? || !result.key?(wrap_path)

    # TODO hacky conversion of string => string hash to symbol => string hash that InSpec needs
    res = result[wrap_path]
    real = []
    res.each do |x|
      n = {}
      x.each_pair { |k, v| n[k.to_sym] = v }
      real.push(n)
    end

    real
  end

end