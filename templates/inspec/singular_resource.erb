<%# The license inside this block applies to this file.
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-%>
<%= compile 'templates/license.erb' -%>

<%= lines(autogen_notice :ruby) -%>

<%
  require 'google/string_utils'

  inside_indent = 8

  requires = generate_requires(object.all_user_properties)
  requires << 'inspec/resource'
  requires << 'google/hash_utils'
-%>
<%= lines(emit_requires(requires)) -%>

# A provider to manage <%= @api.name -%> resources.
class <%= object.name -%> < Inspec.resource(1)

  name '<%= resource_name(object, product_ns) -%>'
  desc '<%= object.name -%>'
  supports platform: 'gcp2'

<% object.properties.each do |prop| -%>
  <%= "attr_reader :#{prop.out_name}" -%>

<% end -%>
  def base
    '<%= object.self_link_url[0].join %>'
  end

  def url
    '<%= format_url(object.self_link_url[1]) %>'
  end

<% if object.self_link_query.nil? -%>
  def initialize(params)
    @fetched = fetch_resource(params)
    parse unless @fetched.nil?
  end
<% else # object.self_link_query.nil? -%>
  def initialize(params)
    @fetched = <%= method_call('fetch_wrapped_resource',
      [
        'params',
        "'#{object.kind}'",
        "'#{object.self_link_query.kind}'",
        "'#{object.self_link_query.items}'"
      ], 2) %>
    parse unless @fetched.nil?
  end
<% end # object.self_link_query.nil? -%>

  def fetch_resource(params)
    get_request = inspec.backend.fetch(base, url, params)
  end

<% if object.self_link_query.nil? -%>
  def initialize(params)
    @fetched = fetch_resource(params)
    parse unless @fetched.nil?
  end
<% else # object.self_link_query.nil? -%>
   # TODO(slevenick) for other products
   def initialize(params)
     raise 'Not implemented'
   end
<% end # object.self_link_query.nil? -%>

  def fetch_resource(params)
    get_request = inspec.backend.fetch(base, url, params)
  end

  def parse
<%
  parse_code = object.properties.map do |prop|
    name = prop.out_name

    if time?(prop)
      init = "DateTime.parse(@fetched['#{prop.api_name}'])"
    elsif primitive?(prop)
      init = "@fetched['#{prop.api_name}']"
    elsif typed_array?(prop)
      init = "#{prop.property_type}.parse(@fetched['#{prop.api_name}'])"
    else
      init = "#{prop.property_type}.new(@fetched['#{prop.api_name}'])"    
    end
    
    assignment = "@#{name} = #{init}"
  end
-%>
<%= lines(indent(parse_code, 4)) -%>
  end

  def exists?
    !@fetched.nil?
  end

<% unless object.self_link_query.nil? -%>
  def fetch_wrapped_resource(params, kind, wrap_kind, wrap_path)
    result = fetch_resource(params, wrap_kind)
    return if result.nil? || !result.key?(wrap_path)
    result = unwrap_resource(result[wrap_path], params)
    return if result.nil?
    raise "Incorrect result: #{result['kind']} (expected #{kind})" \
      unless result['kind'] == kind
    result
  end


  def unwrap_resource(result, resource)
    query_predicate = unwrap_resource_filter(resource)
    matches = result.select do |entry|
      query_predicate.all? do |k, v|
        entry[k.id2name] == v
      end
    end
    raise "More than 1 result found: #{matches}" if matches.size > 1
    return if matches.empty?
    matches.first
  end

<%
  urf_code = [
    '{',
    indent_list(
      Hash[object.identity.map { |i| [i, "resource[:#{property_out_name(i)}]"] }]
        .map { |k, v| "#{k.out_name}: #{v}" }, 2
    ),
    '}'
  ]
-%>
  def unwrap_resource_filter(resource)
    self.class.unwrap_resource_filter(resource)
  end
<%= lines(indent(emit_method('self.unwrap_resource_filter', %w[resource],
                             urf_code, file_relative), 2), 1) -%>
<% end # object.self_link_query.nil? -%>
end
